"""Main bot module for channel news posting"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, Router
from telegram_bot.config import BotConfig
import sys
import os
from datetime import datetime
from telegram_bot.rabbitmq_utils import RabbitMQClient

# Add the project root to Python path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from parser.categories import CategoryStructure

# Initialize bot and dispatcher
bot = Bot(token=BotConfig().token)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# Initialize RabbitMQ client
rabbitmq_client = RabbitMQClient()

# Constants
PARSED_ARTICLES_QUEUE = "parsed_articles"      # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
TELEGRAM_CHANNEL_ID = -1002745773579          # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
MESSAGE_DELAY = 5                             # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ–∫—É–Ω–¥—ã)
MAX_RETRIES = 3                              # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
message_semaphore = asyncio.Semaphore(2)  # –ú–∞–∫—Å–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

async def send_telegram_message(chat_id: int, message_text: str, photo_url: str = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
        message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        photo_url (str, optional): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    for attempt in range(MAX_RETRIES):
        try:
            if photo_url:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_url,
                    caption=message_text,
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
            return True
            
        except Exception as e:
            logging.error(f"Attempt {attempt + 1} failed: {e}")
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
            continue
            
    return False

async def process_article_message(message: dict) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    Args:
        message (dict): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏
    """
    async with message_semaphore:  # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        try:
            article = message.get("article")
            category_name = message.get("category_name")
            
            if not article:
                logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üì∞ *{article['title']}*\n\n"
                f"üìÅ {category_name}\n"
                f"üîç {article.get('subtitle', '')}\n\n"
                f"üìÖ {article.get('publication_date', 'Data nie podana')}\n"
                f"‚úçÔ∏è {article.get('author', 'Autor nie podany')}\n\n"
                f"üîó [Czytaj wiƒôcej]({article['url']})"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            success = await send_telegram_message(
                chat_id=TELEGRAM_CHANNEL_ID,
                message_text=message_text,
                photo_url=article.get('image_url')
            )

            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                await asyncio.sleep(MESSAGE_DELAY)
            else:
                logging.error("Failed to send message after all retries")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")

async def start_rabbitmq():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ
    """
    try:
        await rabbitmq_client.connect()
        await rabbitmq_client.declare_queue(PARSED_ARTICLES_QUEUE)
        await rabbitmq_client.consume_messages(PARSED_ARTICLES_QUEUE, process_article_message)
        logging.info("RabbitMQ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RabbitMQ: {e}")
        raise

async def main():
    """Main function"""
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RabbitMQ
    await start_rabbitmq()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await bot.send_message(
            chat_id=TELEGRAM_CHANNEL_ID,
            text="ü§ñ Bot zosta≈Ç uruchomiony i rozpoczyna monitoring wiadomo≈õci.\n"
                 "Nowe artyku≈Çy bƒôdƒÖ automatycznie publikowane w tym kanale.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # Start polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
